- name: contest homedir configuration files
  copy:
    src: home/
    dest: /home/contest/

- name: training homedir configuration files
  copy:
    src: home/
    dest: /home/training/

- name: look and feel package setting
  lineinfile:
    regexp: "LookAndFeelPackage"
    line: "LookAndFeelPackage=sk.oi.oilive.{{version}}"
    dest: /home/{{ item }}/.config/kdeglobals
  with_items:
    - training
    - contest

- name: splashrc theme setting
  lineinfile:
    regexp: "Theme"
    line: "Theme=sk.oi.oilive.{{version}}"
    dest: /home/{{ item }}/.config/ksplashrc
  with_items:
    - training
    - contest

- name: kscreenlockerrc theme setting
  lineinfile:
    regexp: "Theme"
    line: "Theme=sk.oi.oilive.{{version}}"
    dest: /home/{{ item }}/.config/kscreenlockerrc
  with_items:
    - training
    - contest

- name: startupconfig theme setting
  lineinfile:
    regexp: "ksplashrc_ksplash_theme"
    line: "ksplashrc_ksplash_theme=sk.oi.oilive.{{version}}"
    dest: /home/{{ item }}/.config/startupconfig
  with_items:
    - training
    - contest

- name: pycharm provisioning
  file:
   path: /home/{{ item.user }}/.PyCharmCE2017.3/{{ item.folder }}/
   state: directory
  with_items:
   - { user: "contest", folder: "config" }
   - { user: "contest", folder: "system" }
   - { user: "training", folder: "config" }
   - { user: "training", folder: "system" }

- name: intellij idea provisioning
  file:
   path: /home/{{ item.user }}/.IdeaIC2017.3/{{ item.folder }}/
   state: directory
  with_items:
   - { user: "contest", folder: "config" }
   - { user: "contest", folder: "system" }
   - { user: "training", folder: "config" }
   - { user: "training", folder: "system" }

- name: contest homedir permissions
  file:
    path: /home/contest/
    mode: u=rwX,g-rwx,o-rwx
    owner: contest
    group: users
    recurse: yes

- name: training homedir permissions
  file:
    path: /home/training/
    mode: u=rwX,g-rwx,o-rwx
    owner: training
    group: users
    recurse: yes

- name: check if vscode is installed
  stat:
    path: /bin/code
  register: code_stat_result

- name: install vscode extensions
  when: code_stat_result.stat.exists == True
  command: code --install-extension {{ item.name }}
  become: yes
  become_user: "{{ item.user }}"  
  with_items:
  - { user: "contest", name: "ms-python.python" }
  - { user: "contest", name: "ms-vscode.cpptools" }
  - { user: "contest", name: "ms-vscode.csharp" }
  - { user: "training", name: "ms-python.python" }
  - { user: "training", name: "ms-vscode.cpptools" }
  - { user: "training", name: "ms-vscode.csharp" }

- name: prepare vscode extension post-install script
  copy:
    src: postinstall_vscode_ext.py
    dest: /tmp/postinstall_vscode_ext.py

- name: post-install vscode extensions
  when: code_stat_result.stat.exists == True
  command: python3 /tmp/postinstall_vscode_ext.py {{ item.name }}
  become: yes
  become_user: "{{ item.user }}"  
  with_items:
  - { user: "contest", name: "ms-python.python" }
  - { user: "contest", name: "ms-vscode.cpptools" }
  - { user: "contest", name: "ms-vscode.csharp" }
  - { user: "training", name: "ms-python.python" }
  - { user: "training", name: "ms-vscode.cpptools" }
  - { user: "training", name: "ms-vscode.csharp" }
  