. /oi-live-misc

_debug_shell() {
    if [ -n "$oi_debug" ]; then
        echo "oi_debug parameter set, starting debug shell."
        launch_interactive_shell
    fi
}

# Params:
# $1: device
# $2: /path/to/mount/point
# $3: mount options
_try_mount() {
    # Doesn't make any sense for non-block devices.
    if ! [ -b "$1" ]; then
        return 1
    fi

    local MYFS MOUNTCMD ID_FS_UUID ID_FS_UUID_ENC ID_FS_VERSION ID_FS_TYPE ID_FS_USAGE
    MYFS=$(eval $(/sbin/blkid -o udev -p "$1" | grep ID_FS_TYPE); echo $ID_FS_TYPE)
    case "$MYFS" in
    "ntfs")
        # Use ntfs-3g instead of mount.
        MOUNTCMD="ntfs-3g-initrd-wrapper -o $3,force,silent,umask=0,no_def_opts,allow_other,streams_interface=windows $1 $2"
        ;;
    *)
        MOUNTCMD="/bin/mount -t $MYFS -o $3 $1 $2"
        ;;
    esac
    if $MOUNTCMD >/dev/null 2>&1; then
        return 0
    fi
    /bin/umount $2 >/dev/null 2>&1

    return 1
}

# Mounts the topmost filesystem containing all the required image files.
_mount_topmost_filesystem () {
    local DEVICES CDROMS HDDS MYDEV partitions drive part UPGRADE_SRC INSTALL_SRC
    # Treats all removable drives as CDROMS (including USB flash drives)
    CDROMS=""
    HDDS=""

    # Mount a tmpfs over /mnt so we can bind and move it later.
    mount -t tmpfs tmpfs /mnt

    for drive in `ls /sys/block`; do
        blkid /dev/$drive > /dev/null
        if [ $? -eq 0 ]; then
            if [ "rom" = $(lsblk /dev/$drive --output TYPE | tail -n+2 | head -n 1) ]; then
                partitions="/dev/$drive"
            else
                partitions=""
                for part in `lsblk /dev/$drive -l --output NAME | tail -n+3`; do
                    partitions="$partitions /dev/$part"
                done
            fi

            if [ $(cat /sys/block/$drive/removable) -ne 0 ]; then
                CDROMS="$CDROMS $partitions"
            else
                HDDS="$HDDS $partitions"
            fi
        fi
    done

    # If doing local install try to locate removable medium with required files
    if [ -n "$oi_localinstall" ]; then
        mkdir -p "$OI_INSTALL_MOUNTPOINT"

        if [ -n "$install_src" ]; then
            INSTALL_SRC="$install_src"
        else
            INSTALL_SRC="$CDROMS"
        fi

        for MYDEV in $INSTALL_SRC; do
            echo -n "Trying to mount $MYDEV read-only... "
            if ! _try_mount "$MYDEV" "$OI_INSTALL_MOUNTPOINT" "ro"; then
                echo "failed."
            else
                echo "success."
                if [ -r "$OI_INSTALL_MOUNTPOINT/$OI_LIVE_IMAGE" ]; then
                    echo "Found $OI_LIVE_IMAGE on $MYDEV."
                    break
                else
                    echo "$OI_LIVE_IMAGE not found on $MYDEV."
                    umount "$MYDEV" >/dev/null 2>&1
                fi
            fi
        done
    fi

    # If doing usb upgrade try to locate removable medium with required files
    if [ -n "$oi_upgrade" ]; then
        mkdir -p "$OI_UPGRADE_MOUNTPOINT"

        if [ -n "$upgrade_src" ]; then
            UPGRADE_SRC="$upgrade_src"
        else
            UPGRADE_SRC="$CDROMS"
        fi

        for MYDEV in $UPGRADE_SRC; do
            echo -n "Trying to mount $MYDEV read-only..."
            if ! _try_mount "$MYDEV" "$OI_UPGRADE_MOUNTPOINT" "ro"; then
                echo "failed."
            else
                echo "success."
                if ls $OI_UPGRADE_MOUNTPOINT/$OI_LIVE_UPDATES &>/dev/null; then
                    echo "Found OI updates on $MYDEV."
                    break
                else
                    echo "OI updates not found on $MYDEV."
                    umount "$MYDEV" >/dev/null 2>&1
                fi
            fi
        done
    fi

    # Depending on the kernel cmdline, choose the right search order.
    if [ -z "$fromcd" ]; then
        DEVICES="$HDDS $CDROMS"
    else
        DEVICES="$CDROMS $HDDS"
    fi

    # If an oi_root parameter was specified, ignore all other options.
    if [ -n "$oi_root" ]; then
        DEVICES="$oi_root"
    fi

    mkdir -p "$OI_MOUNTPOINT"

    for MYDEV in $DEVICES; do
        # Attempt a read-only mount first. We need this to be able to
        # mount CD/DVD.
        echo -n "Trying to mount $MYDEV read-only... "
        if ! _try_mount "$MYDEV" "$OI_MOUNTPOINT" "ro"; then
            echo "failed."
        else
            echo "success."
            if [ -z "$install""$oi_localinstall" ]; then
                # Unless we're going to install, search for our files.
                if [ -r "$OI_MOUNTPOINT/$OI_LIVE_IMAGE" ]; then
                    echo "Found $OI_LIVE_IMAGE on $MYDEV."
                    echo -n "Trying to remount read-write... "
                    /bin/umount "$MYDEV" >/dev/null 2>&1
                    if ! _try_mount "$MYDEV" "$OI_MOUNTPOINT" "rw"; then
                        echo "failed. Remounting read-only again."
                        if ! _try_mount "$MYDEV" "$OI_MOUNTPOINT" "ro"; then
                            echo "Something went really wrong, can't even remount read-only again."
                            echo "Giving up."
                        else
                            return 0
                        fi
                    else
                        echo "success."
                        return 0
                    fi
                else
                    echo "$OI_LIVE_IMAGE not found on $MYDEV."
                fi
            else
                # If we're installing, read-write is a necessity.
                echo -n "Trying to remount read-write... "
                umount "$MYDEV" >/dev/null 2>&1
                if ! _try_mount "$MYDEV" "$OI_MOUNTPOINT" "rw"; then
                    echo "failed."
                else
                    # check if we got enough space for installation.
                    if [ $(df -m $OI_MOUNTPOINT | tail -1 | awk '{print $4}') -gt 5120 ]; then

                        echo "success."
                        return 0
                    else
                        echo "not enough free space!"
                    fi
                fi
            fi
        fi
        umount "$MYDEV" >/dev/null 2>&1
    done

    if [ -z "$install""$oi_localinstall" ]; then
        echo "Failed to find $OI_LIVE_IMAGE on any available filesystem."
        echo "Aborting."
        oi_abort
    fi

    echo "Failed to mount a read-write filesystem. Aborting."
    oi_abort
}

_uninstall() {
    echo -n "Removing all OI-Live files from the disk... "
    rm -f "$OI_MOUNTPOINT/$OI_LIVE_IMAGE" "$OI_MOUNTPOINT/$OI_RW_IMAGE" "$OI_MOUNTPOINT/$OI_SWAPFILE" "$OI_MOUNTPOINT/"$OI_LIVE_UPDATES
    echo "done."
}

_upgrade() {
    # Test if OI_UPGRADE_MOUNTPOINT is mounted
    if grep -qs "$OI_UPGRADE_MOUNTPOINT" /proc/mounts; then
        echo "Going to upgrade OI-Live on your hard drive..."
        for update in $OI_UPGRADE_MOUNTPOINT/$OI_LIVE_UPDATES; do
            basename $update
            pv "$update" > "$OI_MOUNTPOINT/$(basename $update)"
        done
    else
        # If not, abort
        echo "No upgrade media found. Aborting!"
        oi_abort
    fi
}

_localinstall() {
    # Test if OI_INSTALL_MOUNTPOINT is mounted
    local update
    if grep -qs "$OI_INSTALL_MOUNTPOINT" /proc/mounts; then
        echo "Going to install OI-Live onto hard drive..."
        echo $OI_LIVE_IMAGE
        pv "$OI_INSTALL_MOUNTPOINT/$OI_LIVE_IMAGE" > "$OI_MOUNTPOINT/$OI_LIVE_IMAGE"
        for update in $OI_INSTALL_MOUNTPOINT/$OI_LIVE_UPDATES; do
            basename $update
            pv "$update" > "$OI_MOUNTPOINT/$(basename $update)"
        done
        umount "$OI_INSTALL_MOUNTPOINT"
        echo "Now you can eject your installation media!"
        # create swap file
        _create_swap
        # create rw image
        _create_rw_image
        echo "Finished."
    else
        # If not, abort
        echo "No installation media found. Aborting!"
        oi_abort
    fi
}

_install() {
    local INTERFACES MYIFACE OLDWD i

    echo "Going to install OI-Live onto hard drive..."

    INTERFACES=$(ls /sys/class/net)

    # Find the interface with an IP address.
    for i in $INTERFACES; do
        if [ "$i" != "lo" ] && (ifconfig "$i" | grep 'inet addr:'); then
            MYIFACE="$i"
        fi
    done

    OLDWD="$PWD"
    cd "$OI_MOUNTPOINT"
    if [ -z "$wget" ]; then
        # Unless we got the wget param, use multicast.
        if udp-receiver --interface "$MYIFACE" --nokbd | tar xzf -; then
            echo "Finished."
        else
            echo "An error occured."
        fi
    else
        # Using wget; determine whether we have been passed an URL.
        if [ "$wget" != "y" ]; then
            # Dostali sme.
            WGET_URL="$wget"
        else
            # Use the default URL on the dateway.
            GW=$(route -n | grep "^0.0.0.0" | head -n1 | awk '{ print $2; }')
            WGET_URL="http://$GW/$OI_URL"
        fi
        if wget -O - "$WGET_URL" | tar xzf -; then
            echo "Finished."
        else
            echo "An error occured."
        fi
    fi
    cd "$OLDWD"

    _create_swap
}

_create_swap() {
    # Unless swap was forbidden, create a swapfile.
    if [ -z "$noswap" ]; then
        echo "Creating swapfile $OI_SWAPFILE..."
        # swap file should not be sparse
        dd if=/dev/zero of="$OI_MOUNTPOINT/$OI_SWAPFILE" bs=1M count="$OI_SWAPFILE_SIZE"
        mkswap "$OI_MOUNTPOINT/$OI_SWAPFILE"
        echo "Finished."
    fi
}

_create_rw_image() {
    echo "Creating rw image $OI_RW_IMAGE..."
    # should create sparse file if supported == almost instant creation
    dd of="$OI_MOUNTPOINT/$OI_RW_IMAGE" bs=1M seek="$OI_RW_SIZE" count=0
    mkfs.ext4 -F "$OI_MOUNTPOINT/$OI_RW_IMAGE"
}

_activate_swap() {
    local PARTITIONS FSTYPE FSSIZE i
    PARTITIONS=$(tail -n +3 < /proc/partitions | awk '{print $4}')

    # Find any existing swap partitions.
    for i in $PARTITIONS; do
        FSTYPE=$(eval $(/sbin/blkid -o udev -p "${root}"); echo $ID_FS_TYPE)
        #eval "$(fstype "/dev/$i")"
        if [ "$FSTYPE" = "swap" ]; then
            echo "Using swap partition /dev/$i."
            swapon "/dev/$i"
        fi
    done

    # Use the swapfile if it's there.
    if [ -f "$OI_MOUNTPOINT/$OI_SWAPFILE" ]; then
        echo "Using swapfile $OI_MOUNTPOINT/$OI_SWAPFILE."
        swapon "$OI_MOUNTPOINT/$OI_SWAPFILE"
    fi
}

# Mounts all the filesystem images (squashfs and others) and creates an
# aufs on top of them.
# Params:
# $1: new root
_mount_images_and_aufs() {
    local ret oi_update next_free_loop update_mpt update_branches
    local newroot="$1"
    # Populate /mnt with mount points.
    mkdir /mnt/rwpart
    mkdir /mnt/oi-image
    mkdir "$OI_UPDATE_MNTPTS"

    # Mount the main squashfs into /mnt/oi-image
    echo -n "Mounting $OI_MOUNTPOINT/$OI_LIVE_IMAGE... "
    if ! ( losetup /dev/loop0 "$OI_MOUNTPOINT/$OI_LIVE_IMAGE" && mount -o ro -t squashfs /dev/loop0 /mnt/oi-image ) >/dev/null 2>&1; then
        echo "Failed to mount OI image. Aborting."
        oi_abort
    fi
    echo "done."

    # Mount the R/W image if allowed.
    if [ -z "$use_ramdisk" -a -f "$OI_MOUNTPOINT/$OI_RW_IMAGE" ]; then
        echo -n "Mounting $OI_MOUNTPOINT/$OI_RW_IMAGE... "
        losetup /dev/loop1 "$OI_MOUNTPOINT/$OI_RW_IMAGE"
        fsck_device /dev/loop1
        ret=$?
        if [ ${ret} -gt 1 ]; then
            echo "R/W filesystem check failed, aborting."
            oi_abort
        fi
        if ! (
            mount -o rw -t ext4 "/dev/loop1" /mnt/rwpart >/dev/null 2>&1
        ); then
            mount -t tmpfs tmpfs /mnt/rwpart
            echo "failed. Using only ramdisk..."
        else
            if [ -n "$clean" ]; then
                echo -n "Cleaning user changes... "
                rm -rf /mnt/rwpart/* /mnt/rwpart/.*
                echo "done."
            fi
            echo "done."
        fi
    fi

    # If any update images are available, mount them as well.
    update_branches=""
    for oi_update in "$OI_MOUNTPOINT/"$OI_LIVE_UPDATES; do
        [ -f "$oi_update" ] || break
        echo -n "Mounting update $oi_update... "
        next_free_loop="$(losetup -f)"
        update_mpt="${OI_UPDATE_MNTPTS}/${next_free_loop#/dev/loop}"
        mkdir -p "$update_mpt"
        if ! ( losetup "$next_free_loop" "$oi_update" && mount -o ro -t squashfs "$next_free_loop" "$update_mpt" ) >/dev/null 2>&1; then
            echo "failed (ignoring)."
        else
            echo "done."
            # Build a list of branches for aufs. This is mainly for
            # historical reasons; neither busybox mount nor klibc mount
            # could remount aufs with more branches.
            update_branches=":${update_mpt}=rr${update_branches}"
        fi
    done

    echo -n "Mounting root aufs into ${newroot}... "
    mount -t aufs -o "br=/mnt/rwpart=rw${update_branches}:/mnt/oi-image=rr" aufs "${newroot}"
    echo "done."

    echo -n "Binding OI-Live filesystems into new root filesystem... "
    mount --bind /mnt "${newroot}/mnt" >/dev/null 2>&1
    mount --bind /mnt/oi_root "${newroot}/mnt/oi_root" >/dev/null 2>&1
    mount --bind /mnt/oi-image "${newroot}/mnt/oi-image" >/dev/null 2>&1
    mount --bind "$OI_UPDATE_MNTPTS" "${newroot}${OI_UPDATE_MNTPTS}" >/dev/null 2>&1
    for update_mpt in "$OI_UPDATE_MNTPTS"/*; do
        [ -f "$update_mpt" ] || break
        mount --bind "$update_mpt" "${newroot}${update_mpt}" >/dev/null
    done
    mount --bind /mnt/rwpart "${newroot}/mnt/rwpart" >/dev/null 2>&1
    echo "done."

    # We need to do this to prevent rc.sysinit from remounting /
    # read-only -- aufs can't recover from that...
    echo -n "Marking root filesystem as initramfs-checked... "
    mkdir -p "/run/initramfs"
    touch "/run/initramfs/fsck-root"
    echo "done."
}

# Params:
# $1: expected root mount point
oi_live_mount_handler() {
    _debug_shell

    _mount_topmost_filesystem

    _debug_shell

    if [ -n "$uninstall" ]; then
        _uninstall
        oi_abort_shutdown
    fi

    if [ -n "$oi_localinstall" ]; then
        _localinstall
        _debug_shell
    fi

    if [ -n "$oi_upgrade" ]; then
        _upgrade
        _debug_shell
    fi

    if [ -n "$install" ]; then
        _install
        _debug_shell
    fi

    if [ -z "$noswap" ]; then
        _activate_swap
    fi

    _debug_shell

    _mount_images_and_aufs "$1"

    _debug_shell
}

run_hook() {
    mount_handler="oi_live_mount_handler"
    # fscking the root device doesn't make much sense in our case...
    skipfsck=y
    fastboot=y
}
